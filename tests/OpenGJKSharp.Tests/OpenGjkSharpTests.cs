using System.Numerics;

namespace OpenGJKSharp.Tests;

public class OpenGjkSharpTests
{
    [Fact]
    public void Should_ReturnTrue_When_Two3DCubesOverlapping()
    {
        var a = new Vector3[]
        {
            new(0, 0, 0),
            new(1, 0, 0),
            new(0, 1, 0),
            new(1, 1, 0),
            new(0, 0, 1),
            new(1, 0, 1),
            new(0, 1, 1),
            new(1, 1, 1),
        };
        var b = new Vector3[]
        {
            new(0.5f, 0.5f, 0),
            new(1.5f, 0.5f, 0),
            new(0.5f, 1.5f, 0),
            new(1.5f, 1.5f, 0),
            new(0.5f, 0.5f, 1),
            new(1.5f, 0.5f, 1),
            new(0.5f, 1.5f, 1),
            new(1.5f, 1.5f, 1),
        };

        bool hasCollision = OpenGJKSharp.HasCollision(a, b);

        Assert.True(hasCollision);
    }

    /// <summary>
    /// https://github.com/MattiaMontanari/openGJK/issues/52
    /// </summary>
    [Fact]
    public void Should_ReturnTrue_When_Two3DCubesSharingSameCenter()
    {
        var ia = new double[3, 8] {
            { 90945.08, 91077.46, 91454.92, 91322.54, 90945.08, 91077.46, 91454.92, 91322.54 },
            { 54122.54, 53745.082, 53877.46, 54254.918, 54122.54, 53745.082, 53877.46, 54254.918 },
            { 300, 300, 300, 300, 0, 0, 0, 0, },
        };

        var ib = new double[3, 8] {
            { 90919.64, 91162.62, 91480.36, 91237.38, 90919.64, 91162.62, 91480.36, 91237.38 },
            { 54037.383, 53719.637, 53962.617, 54280.363, 54037.383, 53719.637, 53962.617, 54280.363 },
            { 300, 300, 300, 300, 0, 0, 0, 0, },
        };

        var distance = OpenGJKSharp.CsFunction(ia.GetLength(1), ia, ib.GetLength(1), ib);

        Assert.Equal(0, distance);
    }

    /// <summary>
    /// https://github.com/MattiaMontanari/openGJK/issues/56
    /// </summary>
    [Fact]
    public void Should_ReturnZero_When_2DArcDoesNotCollideWithRectangle()
    {
        Vector2[] a = [
            new(14483f, 45848f),
            new(15133f, 44923f),
            new(15147.594f, 44933.43f),
            new(15162.021f, 44944.09f),
            new(15176.277f, 44954.977f),
            new(15190.358f, 44966.086f),
            new(15204.262f, 44977.42f),
            new(15217.983f, 44988.977f),
            new(15231.5205f, 45000.746f),
            new(15244.868f, 45012.727f),
            new(15258.025f, 45024.918f),
            new(15270.986f, 45037.32f),
            new(15283.75f, 45049.926f),
            new(15296.312f, 45062.73f),
            new(15308.668f, 45075.73f),
            new(15320.816f, 45088.93f),
            new(15332.755f, 45102.316f),
            new(15344.479f, 45115.895f),
            new(15355.985f, 45129.652f),
            new(15367.273f, 45143.594f),
            new(15378.338f, 45157.715f),
            new(15389.177f, 45172.008f),
            new(15399.788f, 45186.47f),
            new(15410.169f, 45201.098f),
            new(15420.315f, 45215.89f),
            new(15430.227f, 45230.84f),
            new(15439.899f, 45245.945f),
            new(15449.331f, 45261.203f),
            new(15458.52f, 45276.61f),
            new(15467.463f, 45292.16f),
            new(15476.157f, 45307.848f),
            new(15484.603f, 45323.676f),
            new(15492.796f, 45339.633f),
            new(15500.734f, 45355.72f),
            new(15508.417f, 45371.926f),
            new(15515.841f, 45388.254f),
            new(15523.005f, 45404.7f),
            new(15529.907f, 45421.258f),
            new(15536.547f, 45437.92f),
            new(15542.92f, 45454.688f),
            new(15549.027f, 45471.555f),
            new(15554.865f, 45488.516f),
            new(15560.435f, 45505.566f),
            new(15565.731f, 45522.703f),
            new(15570.757f, 45539.92f),
            new(15575.508f, 45557.223f),
            new(15579.983f, 45574.59f),
            new(15584.184f, 45592.03f),
            new(15588.105f, 45609.535f),
            new(15591.75f, 45627.098f),
            new(15595.115f, 45644.715f),
            new(15598.201f, 45662.387f),
            new(15601.005f, 45680.105f),
            new(15603.528f, 45697.863f),
            new(15605.77f, 45715.66f),
            new(15607.728f, 45733.492f),
            new(15609.403f, 45751.35f),
            new(15610.795f, 45769.234f),
            new(15611.902f, 45787.137f),
            new(15612.726f, 45805.055f),
            new(15613.266f, 45822.984f),
            new(15613.52f, 45840.92f),
            new(15613.49f, 45858.86f),
            new(15613.175f, 45876.793f),
            new(15612.576f, 45894.723f),
            new(15611.692f, 45912.637f),
            new(15610.525f, 45930.54f),
            new(15609.073f, 45948.418f),
            new(15607.339f, 45966.27f),
            new(15605.32f, 45984.094f),
            new(15603.0205f, 46001.883f),
            new(15600.4375f, 46019.633f),
            new(15597.574f, 46037.344f),
            new(15594.43f, 46055f),
            new(15591.005f, 46072.61f),
            new(15587.302f, 46090.16f),
            new(15583.321f, 46107.652f),
            new(15579.0625f, 46125.08f),
            new(15574.528f, 46142.43f),
            new(15569.72f, 46159.71f),
            new(15564.638f, 46176.914f),
            new(15559.283f, 46194.035f),
            new(15553.657f, 46211.066f),
            new(15547.762f, 46228.008f),
            new(15541.599f, 46244.855f),
            new(15535.169f, 46261.6f),
            new(15528.475f, 46278.242f),
            new(15521.517f, 46294.777f),
            new(15514.297f, 46311.195f),
            new(15506.818f, 46327.5f),
            new(15499.082f, 46343.684f),
            new(15491.09f, 46359.742f),
            new(15482.844f, 46375.67f),
            new(15474.346f, 46391.47f),
            new(15465.598f, 46407.13f),
            new(15456.604f, 46422.65f),
            new(15447.363f, 46438.023f),
            new(15437.881f, 46453.25f),
            new(15428.157f, 46468.324f),
            new(15418.196f, 46483.242f),
            new(15408f, 46498f),
            new(14483f, 45848f),
        ];
        Vector2[] b = [
            new(15612f, 43698f),
            new(17462f, 43698f),
            new(17462f, 48644f),
            new(15612f, 48644f),
        ];

        bool hasCollision = OpenGJKSharp.HasCollision(a, b);

        Assert.True(hasCollision);
    }
}